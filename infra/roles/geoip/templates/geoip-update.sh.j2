#!/usr/bin/env bash
set -euo pipefail

DATA_DIR="{{ geoip_data_dir }}"
LICENSE_FILE="{{ geoip_license_file }}"
BASE_URL="{{ geoip_maxmind_base_url }}"
RESTART_UNIT="{{ geoip_restart_service }}"

if [[ ! -r "$LICENSE_FILE" ]]; then
  echo "License file $LICENSE_FILE not found or unreadable" >&2
  exit 1
fi

LICENSE_KEY=$(tr -d '\n\r' < "$LICENSE_FILE")
if [[ -z "$LICENSE_KEY" ]]; then
  echo "License key is empty" >&2
  exit 1
fi

TMPDIR=$(mktemp -d)
trap 'rm -rf "$TMPDIR"' EXIT
umask 022
mkdir -p "$DATA_DIR"

UPDATED=0

download_mmdb() {
  local edition="$1"
  local filename="$2"
  local tarball="$TMPDIR/${edition}.tar.gz"
  local sha_file="$TMPDIR/${edition}.sha256"
  local checksum_url="${BASE_URL}?edition_id=${edition}&license_key=${LICENSE_KEY}&suffix=tar.gz.sha256"
  local download_url="${BASE_URL}?edition_id=${edition}&license_key=${LICENSE_KEY}&suffix=tar.gz"

  curl -fsSL "$checksum_url" -o "$sha_file"
  local checksum
  checksum=$(awk '{print $1}' "$sha_file")
  if [[ -z "$checksum" ]]; then
    echo "Failed to read checksum for ${edition}" >&2
    return 1
  fi

  curl -fsSL "$download_url" -o "$tarball"
  echo "${checksum}  $tarball" | sha256sum --check --status

  local extract_dir="$TMPDIR/${edition}"
  mkdir -p "$extract_dir"
  tar -xzf "$tarball" -C "$extract_dir"

  local src
  src=$(find "$extract_dir" -type f -name "${edition}.mmdb" -print -quit)
  if [[ -z "$src" ]]; then
    echo "${edition}.mmdb not found in archive" >&2
    return 1
  fi

  local dest="$DATA_DIR/$filename"
  if [[ ! -f "$dest" ]] || ! cmp -s "$src" "$dest"; then
    install -m 0644 "$src" "$dest"
    UPDATED=1
  fi
}

download_mmdb "GeoLite2-City" "GeoLite2-City.mmdb"
download_mmdb "GeoLite2-ASN" "GeoLite2-ASN.mmdb"

if [[ $UPDATED -eq 1 ]]; then
  echo "GeoIP databases updated"
  if command -v systemctl >/dev/null 2>&1; then
    systemctl try-restart "$RESTART_UNIT" || true
  fi
else
  echo "GeoIP databases are already up to date"
fi
